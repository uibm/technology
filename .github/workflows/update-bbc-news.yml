name: Update BBC Tech News Changelog

on:
  schedule:
    - cron: '*/5 * * * *'  # Every 5 minutes for testing
  workflow_dispatch:      # Allow manual trigger

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  update-changelog:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create requirements file
        run: |
          cat > requirements.txt << 'EOF'
          feedparser==6.0.11
          markdown==3.5.2
          PyYAML==6.0.1
          python-dateutil==2.8.2
          pytz==2024.1
          EOF

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create initial directories
        run: |
          mkdir -p _data
          # Initialize empty changelog if it doesn't exist
          if [ ! -f _data/changelog.yml ]; then
            echo "[]" > _data/changelog.yml
          fi

      - name: Fetch and process RSS feed
        run: |
          cat > update_changelog.py << 'EOF'
          import feedparser
          import yaml
          from datetime import datetime
          import os
          from dateutil import parser
          import pytz
          import time
          import hashlib
          import sys

          def generate_entry_hash(data):
              """Generate a unique hash based on content"""
              if isinstance(data, feedparser.FeedParserDict):
                  # For new RSS entries
                  content = f"{data.title}{data.summary}{data.link}"
              else:
                  # For existing changelog entries
                  content = f"{data.get('title', '')}{data.get('summary', '')}{data.get('link', '')}"
              return hashlib.md5(content.encode()).hexdigest()

          def load_existing_entries():
              if os.path.exists('_data/changelog.yml'):
                  with open('_data/changelog.yml', 'r', encoding='utf-8') as f:
                      try:
                          entries = yaml.safe_load(f) or []
                          # Add hash if missing
                          for entry in entries:
                              if 'hash' not in entry:
                                  entry['hash'] = generate_entry_hash(entry)
                          return entries
                      except yaml.YAMLError as e:
                          print(f"Error loading YAML: {e}", file=sys.stderr)
                          return []
              return []

          def fetch_bbc_feed():
              max_retries = 3
              for attempt in range(max_retries):
                  try:
                      feed = feedparser.parse('https://feeds.bbci.co.uk/news/technology/rss.xml')
                      if not hasattr(feed, 'status') or feed.status != 200:
                          print(f"Feed status: {getattr(feed, 'status', 'unknown')}")
                          if attempt < max_retries - 1:
                              time.sleep(2 ** attempt)
                              continue
                      return feed.entries
                  except Exception as e:
                      print(f"Attempt {attempt + 1} failed: {str(e)}")
                      if attempt == max_retries - 1:
                          raise
                      time.sleep(2 ** attempt)
              return []

          def create_changelog_entry(entry):
              ist_tz = pytz.timezone('Asia/Kolkata')
              current_time = datetime.now(ist_tz)
              
              return {
                  'title': entry.title,
                  'link': entry.link,
                  'published': parser.parse(entry.published).astimezone(ist_tz).isoformat(),
                  'summary': entry.summary,
                  'guid': entry.guid,
                  'hash': generate_entry_hash(entry),
                  'timestamp': current_time.isoformat(),
                  'fetched_at': current_time.strftime('%Y-%m-%d %H:%M:%S IST')
              }

          def update_changelog():
              print(f"Starting changelog update at {datetime.now(pytz.timezone('Asia/Kolkata')).strftime('%Y-%m-%d %H:%M:%S IST')}")
              
              existing_entries = load_existing_entries()
              print(f"Loaded {len(existing_entries)} existing entries")
              
              existing_hashes = {entry['hash'] for entry in existing_entries}
              new_entries = fetch_bbc_feed()
              print(f"Fetched {len(new_entries)} entries from RSS")
              
              updates = []
              for entry in new_entries:
                  entry_hash = generate_entry_hash(entry)
                  if entry_hash not in existing_hashes:
                      updates.append(create_changelog_entry(entry))
              
              print(f"Found {len(updates)} new unique entries")
              
              if not updates:
                  print("No new unique entries found")
                  return False
              
              all_entries = updates + existing_entries
              all_entries.sort(key=lambda x: x['published'], reverse=True)
              all_entries = all_entries[:100]
              
              # Save changelog
              with open('_data/changelog.yml', 'w', encoding='utf-8') as f:
                  yaml.dump(all_entries, f, allow_unicode=True, sort_keys=False)
              
              # Generate HTML
              with open('index.html', 'w', encoding='utf-8') as f:
                  f.write('''
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>BBC Technology News Daily Changelog</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
                      line-height: 1.6;
                      max-width: 800px;
                      margin: 0 auto;
                      padding: 20px;
                      background: #f5f5f5;
                  }
                  .entry {
                      background: white;
                      padding: 20px;
                      margin-bottom: 20px;
                      border-radius: 8px;
                      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                      transition: transform 0.2s ease;
                  }
                  .entry:hover {
                      transform: translateY(-2px);
                      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                  }
                  .entry h2 {
                      margin-top: 0;
                      color: #2c3e50;
                  }
                  .entry-meta {
                      color: #666;
                      font-size: 0.9em;
                      margin-bottom: 10px;
                  }
                  a {
                      color: #3498db;
                      text-decoration: none;
                  }
                  a:hover {
                      text-decoration: underline;
                  }
                  .header {
                      text-align: center;
                      margin-bottom: 40px;
                  }
                  .last-updated {
                      text-align: center;
                      color: #666;
                      margin-bottom: 20px;
                      font-size: 0.9em;
                  }
                  .schedule-info {
                      text-align: center;
                      color: #666;
                      font-size: 0.8em;
                      margin-bottom: 30px;
                  }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>BBC Technology News Daily Changelog</h1>
              </div>
              <div class="last-updated">
                  Last updated: ''' + datetime.now(pytz.timezone('Asia/Kolkata')).strftime('%Y-%m-%d %H:%M:%S IST') + '''
              </div>
              <div class="schedule-info">
                  Updated every 5 minutes
              </div>
          ''')
                  
                  for entry in all_entries:
                      published = parser.parse(entry['published']).strftime('%Y-%m-%d %H:%M:%S IST')
                      f.write(f'''
              <div class="entry">
                  <h2><a href="{entry['link']}">{entry['title']}</a></h2>
                  <div class="entry-meta">
                      Published: {published}<br>
                      Fetched: {entry.get('fetched_at', 'N/A')}
                  </div>
                  <div class="entry-content">
                      {entry['summary']}
                  </div>
              </div>
          ''')
                  
                  f.write('''
              </body>
          </html>
          ''')
              
              return True

          if __name__ == '__main__':
              try:
                  update_changelog()
              except Exception as e:
                  print(f"Error: {str(e)}", file=sys.stderr)
                  sys.exit(1)
          EOF

          python update_changelog.py

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Commit changes
        run: |
          git config --local user.email "ujjwal.kumar1@ibm.com"
          git config --local user.name "ujjwal-ibm"
          echo "Commit time UTC: $(date -u)" >> commit_time.txt
          echo "Commit time IST: $(TZ=Asia/Kolkata date)" >> commit_time.txt
          git add _data/changelog.yml index.html requirements.txt commit_time.txt
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update changelog with latest BBC Tech news [$(TZ=Asia/Kolkata date '+%Y-%m-%d %H:%M:%S IST')]" && git push)