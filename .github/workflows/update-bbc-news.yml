name: Update BBC Tech News Changelog

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:      # Allow manual trigger

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  update-changelog:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create requirements file
        run: |
          cat > requirements.txt << 'EOF'
          feedparser==6.0.11
          markdown==3.5.2
          PyYAML==6.0.1
          python-dateutil==2.8.2
          pytz==2024.1
          requests==2.31.0
          beautifulsoup4==4.12.2
          EOF

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create initial directories
        run: |
          mkdir -p _data assets/js assets/css
          # Initialize empty changelog if it doesn't exist
          if [ ! -f _data/changelog.yml ]; then
            echo "[]" > _data/changelog.yml
          fi

      - name: Fetch and process RSS feed
        run: |
          cat > update_changelog.py << 'EOF'
          import feedparser
          import yaml
          from datetime import datetime
          import os
          from dateutil import parser
          import pytz
          import time
          import hashlib
          import sys
          import requests
          from bs4 import BeautifulSoup
          import re

          def generate_entry_hash(data):
              """Generate a unique hash based on content"""
              if isinstance(data, feedparser.FeedParserDict):
                  content = f"{data.title}{data.summary}{data.link}"
              else:
                  content = f"{data.get('title', '')}{data.get('summary', '')}{data.get('link', '')}"
              return hashlib.md5(content.encode()).hexdigest()

          def extract_image_from_content(content, link):
              """Extract featured image from content or article page"""
              try:
                  # Try to find image in RSS content first
                  soup = BeautifulSoup(content, 'html.parser')
                  img_tag = soup.find('img')
                  if img_tag and img_tag.get('src'):
                      return img_tag['src']
                  
                  # If no image in RSS, try to fetch from article page
                  headers = {
                      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                  }
                  response = requests.get(link, headers=headers, timeout=10)
                  if response.status_code == 200:
                      page_soup = BeautifulSoup(response.content, 'html.parser')
                      
                      # Look for BBC specific image selectors
                      selectors = [
                          'meta[property="og:image"]',
                          'img[data-component="image"]',
                          '.story-body__image img',
                          'figure img'
                      ]
                      
                      for selector in selectors:
                          img_element = page_soup.select_one(selector)
                          if img_element:
                              img_url = img_element.get('content') or img_element.get('src')
                              if img_url:
                                  return img_url if img_url.startswith('http') else f"https://www.bbc.com{img_url}"
              except Exception as e:
                  print(f"Error extracting image for {link}: {str(e)}")
              
              # Return a default tech-related placeholder
              return "https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=400&h=250&fit=crop"

          def categorize_article(title, summary):
              """Categorize article based on content"""
              content = f"{title} {summary}".lower()
              
              categories = {
                  'AI & Machine Learning': ['ai', 'artificial intelligence', 'machine learning', 'chatgpt', 'openai', 'neural', 'algorithm'],
                  'Cybersecurity': ['security', 'hack', 'breach', 'cyber', 'malware', 'phishing', 'vulnerability'],
                  'Mobile & Apps': ['iphone', 'android', 'app', 'mobile', 'smartphone', 'ios'],
                  'Social Media': ['facebook', 'twitter', 'instagram', 'tiktok', 'social media', 'meta'],
                  'Gaming': ['game', 'gaming', 'xbox', 'playstation', 'nintendo', 'esports'],
                  'Business & Finance': ['startup', 'investment', 'funding', 'ipo', 'business', 'revenue'],
                  'Hardware': ['chip', 'processor', 'hardware', 'device', 'component'],
                  'Software': ['software', 'update', 'version', 'release', 'platform']
              }
              
              for category, keywords in categories.items():
                  if any(keyword in content for keyword in keywords):
                      return category
              return 'Technology'

          def load_existing_entries():
              if os.path.exists('_data/changelog.yml'):
                  with open('_data/changelog.yml', 'r', encoding='utf-8') as f:
                      try:
                          entries = yaml.safe_load(f) or []
                          for entry in entries:
                              if 'hash' not in entry:
                                  entry['hash'] = generate_entry_hash(entry)
                          return entries
                      except yaml.YAMLError as e:
                          print(f"Error loading YAML: {e}", file=sys.stderr)
                          return []
              return []

          def fetch_bbc_feed():
              max_retries = 3
              for attempt in range(max_retries):
                  try:
                      feed = feedparser.parse('https://feeds.bbci.co.uk/news/technology/rss.xml')
                      if not hasattr(feed, 'status') or feed.status != 200:
                          print(f"Feed status: {getattr(feed, 'status', 'unknown')}")
                          if attempt < max_retries - 1:
                              time.sleep(2 ** attempt)
                              continue
                      return feed.entries
                  except Exception as e:
                      print(f"Attempt {attempt + 1} failed: {str(e)}")
                      if attempt == max_retries - 1:
                          raise
                      time.sleep(2 ** attempt)
              return []

          def create_changelog_entry(entry):
              ist_tz = pytz.timezone('Asia/Kolkata')
              current_time = datetime.now(ist_tz)
              
              # Extract reading time estimate
              word_count = len(entry.summary.split())
              reading_time = max(1, round(word_count / 200))  # 200 words per minute
              
              return {
                  'title': entry.title,
                  'link': entry.link,
                  'published': parser.parse(entry.published).astimezone(ist_tz).isoformat(),
                  'summary': entry.summary,
                  'guid': entry.guid,
                  'hash': generate_entry_hash(entry),
                  'timestamp': current_time.isoformat(),
                  'fetched_at': current_time.strftime('%Y-%m-%d %H:%M:%S IST'),
                  'image_url': extract_image_from_content(entry.get('content', [{}])[0].get('value', '') if entry.get('content') else '', entry.link),
                  'category': categorize_article(entry.title, entry.summary),
                  'reading_time': f"{reading_time} min read",
                  'author': entry.get('author', 'BBC Technology'),
                  'tags': list(set(re.findall(r'\b(?:AI|tech|data|cyber|mobile|app|software|hardware|startup|innovation)\b', 
                                             f"{entry.title} {entry.summary}", re.IGNORECASE)))[:3]
              }

          def update_changelog():
              print(f"Starting changelog update at {datetime.now(pytz.timezone('Asia/Kolkata')).strftime('%Y-%m-%d %H:%M:%S IST')}")
              
              existing_entries = load_existing_entries()
              print(f"Loaded {len(existing_entries)} existing entries")
              
              existing_hashes = {entry['hash'] for entry in existing_entries}
              new_entries = fetch_bbc_feed()
              print(f"Fetched {len(new_entries)} entries from RSS")
              
              updates = []
              for entry in new_entries:
                  entry_hash = generate_entry_hash(entry)
                  if entry_hash not in existing_hashes:
                      updates.append(create_changelog_entry(entry))
              
              print(f"Found {len(updates)} new unique entries")
              
              if not updates:
                  print("No new unique entries found")
                  # Still update the page with existing entries
                  updates = []
              
              all_entries = updates + existing_entries
              all_entries.sort(key=lambda x: x['published'], reverse=True)
              all_entries = all_entries[:100]
              
              # Save changelog
              with open('_data/changelog.yml', 'w', encoding='utf-8') as f:
                  yaml.dump(all_entries, f, allow_unicode=True, sort_keys=False)
              
              # Generate the premium HTML
              generate_premium_html(all_entries, len(updates))
              
              return len(updates) > 0

          def generate_premium_html(entries, new_count):
              """Generate the premium HTML with advanced UI"""
              
              # Get categories and their counts
              categories = {}
              for entry in entries:
                  cat = entry.get('category', 'Technology')
                  categories[cat] = categories.get(cat, 0) + 1
              
              with open('index.html', 'w', encoding='utf-8') as f:
                  f.write(f'''<!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>BBC Technology News - Daily Digest</title>
              <meta name="description" content="Stay ahead with the latest technology news from BBC, beautifully curated and automatically updated.">
              
              <!-- Preload critical resources -->
              <link rel="preconnect" href="https://fonts.googleapis.com">
              <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
              <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=JetBrains+Mono:wght@400;500&display=swap" rel="stylesheet">
              
              <!-- Favicons -->
              <link rel="icon" type="image/svg+xml" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>📱</text></svg>">
              
              <style>
                  :root {{
                      /* Color System - Dark Theme */
                      --bg-primary: #0a0a0a;
                      --bg-secondary: #111111;
                      --bg-tertiary: #1a1a1a;
                      --bg-card: #141414;
                      --bg-glass: rgba(20, 20, 20, 0.8);
                      --bg-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      --bg-hero: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
                      
                      /* Text Colors */
                      --text-primary: #ffffff;
                      --text-secondary: #a1a1aa;
                      --text-tertiary: #71717a;
                      --text-accent: #3b82f6;
                      
                      /* Accent Colors */
                      --accent-primary: #3b82f6;
                      --accent-secondary: #8b5cf6;
                      --accent-success: #10b981;
                      --accent-warning: #f59e0b;
                      --accent-error: #ef4444;
                      
                      /* Borders & Shadows */
                      --border-primary: rgba(255, 255, 255, 0.1);
                      --border-secondary: rgba(255, 255, 255, 0.05);
                      --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.5);
                      --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.3);
                      --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.4);
                      --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.5);
                      --shadow-glow: 0 0 20px rgba(59, 130, 246, 0.3);
                      
                      /* Spacing */
                      --space-xs: 0.25rem;
                      --space-sm: 0.5rem;
                      --space-md: 1rem;
                      --space-lg: 1.5rem;
                      --space-xl: 2rem;
                      --space-2xl: 3rem;
                      
                      /* Border Radius */
                      --radius-sm: 0.375rem;
                      --radius-md: 0.5rem;
                      --radius-lg: 0.75rem;
                      --radius-xl: 1rem;
                      --radius-2xl: 1.5rem;
                      
                      /* Animations */
                      --transition-fast: 0.15s cubic-bezier(0.4, 0, 0.2, 1);
                      --transition-base: 0.25s cubic-bezier(0.4, 0, 0.2, 1);
                      --transition-slow: 0.35s cubic-bezier(0.4, 0, 0.2, 1);
                  }}

                  * {{
                      margin: 0;
                      padding: 0;
                      box-sizing: border-box;
                  }}

                  html {{
                      scroll-behavior: smooth;
                  }}

                  body {{
                      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                      background: var(--bg-primary);
                      color: var(--text-primary);
                      line-height: 1.6;
                      font-feature-settings: "cv11", "ss01";
                      -webkit-font-smoothing: antialiased;
                      -moz-osx-font-smoothing: grayscale;
                      overflow-x: hidden;
                  }}

                  /* Custom Scrollbar */
                  ::-webkit-scrollbar {{
                      width: 8px;
                  }}

                  ::-webkit-scrollbar-track {{
                      background: var(--bg-secondary);
                  }}

                  ::-webkit-scrollbar-thumb {{
                      background: var(--text-tertiary);
                      border-radius: 4px;
                  }}

                  ::-webkit-scrollbar-thumb:hover {{
                      background: var(--text-secondary);
                  }}

                  /* Background Pattern */
                  body::before {{
                      content: '';
                      position: fixed;
                      top: 0;
                      left: 0;
                      width: 100%;
                      height: 100%;
                      background: 
                          radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.1) 0%, transparent 50%),
                          radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.1) 0%, transparent 50%),
                          radial-gradient(circle at 40% 40%, rgba(120, 219, 226, 0.1) 0%, transparent 50%);
                      pointer-events: none;
                      z-index: -1;
                  }}

                  /* Container */
                  .container {{
                      max-width: 1400px;
                      margin: 0 auto;
                      padding: 0 var(--space-lg);
                  }}

                  /* Header */
                  .header {{
                      position: relative;
                      padding: var(--space-2xl) 0 var(--space-xl);
                      text-align: center;
                      background: var(--bg-hero);
                      margin-bottom: var(--space-2xl);
                      border-radius: 0 0 var(--radius-2xl) var(--radius-2xl);
                      overflow: hidden;
                  }}

                  .header::before {{
                      content: '';
                      position: absolute;
                      top: 0;
                      left: 0;
                      right: 0;
                      bottom: 0;
                      background: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.05'%3E%3Ccircle cx='7' cy='7' r='1'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E") repeat;
                      opacity: 0.5;
                  }}

                  .header-content {{
                      position: relative;
                      z-index: 1;
                  }}

                  .header h1 {{
                      font-size: clamp(2.5rem, 5vw, 4rem);
                      font-weight: 800;
                      background: linear-gradient(135deg, #ffffff 0%, #a1a1aa 100%);
                      -webkit-background-clip: text;
                      -webkit-text-fill-color: transparent;
                      background-clip: text;
                      margin-bottom: var(--space-md);
                      letter-spacing: -0.02em;
                  }}

                  .header-subtitle {{
                      font-size: 1.25rem;
                      color: var(--text-secondary);
                      margin-bottom: var(--space-lg);
                      font-weight: 400;
                  }}

                  .header-stats {{
                      display: flex;
                      justify-content: center;
                      gap: var(--space-xl);
                      flex-wrap: wrap;
                  }}

                  .stat-item {{
                      display: flex;
                      flex-direction: column;
                      align-items: center;
                      padding: var(--space-md);
                      background: rgba(255, 255, 255, 0.1);
                      border-radius: var(--radius-lg);
                      backdrop-filter: blur(10px);
                      border: 1px solid var(--border-primary);
                      min-width: 120px;
                  }}

                  .stat-number {{
                      font-size: 2rem;
                      font-weight: 700;
                      color: var(--text-primary);
                      line-height: 1;
                  }}

                  .stat-label {{
                      font-size: 0.875rem;
                      color: var(--text-secondary);
                      margin-top: var(--space-xs);
                  }}

                  /* Navigation Tabs */
                  .nav-tabs {{
                      display: flex;
                      gap: var(--space-sm);
                      padding: var(--space-lg) 0;
                      margin-bottom: var(--space-xl);
                      overflow-x: auto;
                      scrollbar-width: none;
                      -ms-overflow-style: none;
                  }}

                  .nav-tabs::-webkit-scrollbar {{
                      display: none;
                  }}

                  .tab-button {{
                      padding: var(--space-sm) var(--space-lg);
                      background: var(--bg-card);
                      border: 1px solid var(--border-primary);
                      border-radius: var(--radius-lg);
                      color: var(--text-secondary);
                      cursor: pointer;
                      transition: all var(--transition-base);
                      white-space: nowrap;
                      font-weight: 500;
                      position: relative;
                      overflow: hidden;
                  }}

                  .tab-button:hover {{
                      background: var(--bg-tertiary);
                      color: var(--text-primary);
                      transform: translateY(-2px);
                  }}

                  .tab-button.active {{
                      background: var(--accent-primary);
                      color: white;
                      border-color: var(--accent-primary);
                      box-shadow: var(--shadow-glow);
                  }}

                  .tab-button::before {{
                      content: '';
                      position: absolute;
                      top: 0;
                      left: -100%;
                      width: 100%;
                      height: 100%;
                      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
                      transition: left var(--transition-slow);
                  }}

                  .tab-button:hover::before {{
                      left: 100%;
                  }}

                  /* Search Bar */
                  .search-container {{
                      position: relative;
                      max-width: 500px;
                      margin: 0 auto var(--space-xl);
                  }}

                  .search-input {{
                      width: 100%;
                      padding: var(--space-lg) var(--space-lg) var(--space-lg) 3rem;
                      background: var(--bg-card);
                      border: 1px solid var(--border-primary);
                      border-radius: var(--radius-xl);
                      color: var(--text-primary);
                      font-size: 1rem;
                      transition: all var(--transition-base);
                  }}

                  .search-input:focus {{
                      outline: none;
                      border-color: var(--accent-primary);
                      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
                  }}

                  .search-icon {{
                      position: absolute;
                      left: var(--space-lg);
                      top: 50%;
                      transform: translateY(-50%);
                      color: var(--text-tertiary);
                      font-size: 1.25rem;
                  }}

                  /* Grid Layout */
                  .articles-grid {{
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(380px, 1fr));
                      gap: var(--space-xl);
                      padding: var(--space-lg);
                  }}

                  /* Article Cards */
                  .article-card {{
                      background: var(--bg-card);
                      border-radius: var(--radius-xl);
                      overflow: hidden;
                      border: 1px solid var(--border-primary);
                      transition: all var(--transition-slow);
                      position: relative;
                      height: fit-content;
                      backdrop-filter: blur(10px);
                  }}

                  .article-card:hover {{
                      transform: translateY(-8px) scale(1.02);
                      box-shadow: var(--shadow-xl);
                      border-color: var(--border-primary);
                  }}

                  .article-card::before {{
                      content: '';
                      position: absolute;
                      top: 0;
                      left: 0;
                      right: 0;
                      bottom: 0;
                      background: linear-gradient(135deg, rgba(59, 130, 246, 0.05) 0%, rgba(139, 92, 246, 0.05) 100%);
                      opacity: 0;
                      transition: opacity var(--transition-base);
                      pointer-events: none;
                  }}

                  .article-card:hover::before {{
                      opacity: 1;
                  }}

                  .article-content {{
                      padding: var(--space-xl);
                      position: relative;
                  }}

                  .article-header {{
                      display: flex;
                      align-items: center;
                      gap: var(--space-md);
                      margin-bottom: var(--space-lg);
                      flex-wrap: wrap;
                  }}

                  .article-category {{
                      padding: var(--space-xs) var(--space-sm);
                      background: var(--accent-primary);
                      color: white;
                      border-radius: var(--radius-sm);
                      font-size: 0.75rem;
                      font-weight: 600;
                      text-transform: uppercase;
                      letter-spacing: 0.05em;
                  }}

                  .article-reading-time {{
                      color: var(--text-tertiary);
                      font-size: 0.875rem;
                      display: flex;
                      align-items: center;
                      gap: var(--space-xs);
                  }}

                  .article-title {{
                      font-size: 1.375rem;
                      font-weight: 700;
                      color: var(--text-primary);
                      margin-bottom: var(--space-md);
                      line-height: 1.3;
                      display: -webkit-box;
                      -webkit-line-clamp: 3;
                      -webkit-box-orient: vertical;
                      overflow: hidden;
                  }}

                  .article-title a {{
                      color: inherit;
                      text-decoration: none;
                      transition: color var(--transition-base);
                  }}

                  .article-title a:hover {{
                      color: var(--accent-primary);
                  }}

                  .article-summary {{
                      color: var(--text-secondary);
                      margin-bottom: var(--space-lg);
                      display: -webkit-box;
                      -webkit-line-clamp: 3;
                      -webkit-box-orient: vertical;
                      overflow: hidden;
                      line-height: 1.6;
                  }}

                  .article-footer {{
                      display: flex;
                      justify-content: space-between;
                      align-items: center;
                      padding-top: var(--space-md);
                      border-top: 1px solid var(--border-secondary);
                      flex-wrap: wrap;
                      gap: var(--space-md);
                  }}

                  .article-meta {{
                      display: flex;
                      align-items: center;
                      gap: var(--space-md);
                      font-size: 0.875rem;
                      color: var(--text-tertiary);
                  }}

                  .article-tags {{
                      display: flex;
                      gap: var(--space-xs);
                      flex-wrap: wrap;
                  }}

                  .tag {{
                      padding: var(--space-xs) var(--space-sm);
                      background: var(--bg-tertiary);
                      color: var(--text-secondary);
                      border-radius: var(--radius-sm);
                      font-size: 0.75rem;
                      border: 1px solid var(--border-secondary);
                  }}

                  /* Featured Article */
                  .featured-article {{
                      grid-column: 1 / -1;
                      background: var(--bg-hero);
                      border-radius: var(--radius-2xl);
                      overflow: hidden;
                      margin-bottom: var(--space-xl);
                      position: relative;
                      padding: var(--space-2xl);
                  }}

                  .featured-article::before {{
                      content: '';
                      position: absolute;
                      top: 0;
                      left: 0;
                      right: 0;
                      bottom: 0;
                      background: linear-gradient(135deg, rgba(0, 0, 0, 0.3) 0%, rgba(0, 0, 0, 0.1) 100%);
                      pointer-events: none;
                  }}

                  .featured-content {{
                      display: flex;
                      flex-direction: column;
                      justify-content: center;
                      position: relative;
                      z-index: 1;
                      text-align: center;
                  }}

                  .featured-title {{
                      font-size: 2.5rem;
                      font-weight: 800;
                      margin-bottom: var(--space-lg);
                      line-height: 1.2;
                      color: white;
                  }}

                  .featured-summary {{
                      font-size: 1.125rem;
                      color: rgba(255, 255, 255, 0.9);
                      margin-bottom: var(--space-xl);
                      line-height: 1.6;
                  }}

                  .featured-button {{
                      display: inline-flex;
                      align-items: center;
                      gap: var(--space-sm);
                      padding: var(--space-lg) var(--space-xl);
                      background: white;
                      color: var(--bg-primary);
                      border-radius: var(--radius-lg);
                      text-decoration: none;
                      font-weight: 600;
                      transition: all var(--transition-base);
                      width: fit-content;
                  }}

                  .featured-button:hover {{
                      transform: translateY(-2px);
                      box-shadow: var(--shadow-lg);
                  }}

                  /* Loading States */
                  .loading {{
                      display: flex;
                      justify-content: center;
                      align-items: center;
                      padding: var(--space-2xl);
                  }}

                  .spinner {{
                      width: 40px;
                      height: 40px;
                      border: 3px solid var(--border-primary);
                      border-top: 3px solid var(--accent-primary);
                      border-radius: 50%;
                      animation: spin 1s linear infinite;
                  }}

                  @keyframes spin {{
                      0% {{ transform: rotate(0deg); }}
                      100% {{ transform: rotate(360deg); }}
                  }}

                  /* Responsive Design */
                  @media (max-width: 768px) {{
                      .container {{
                          padding: 0 var(--space-md);
                      }}

                      .header {{
                          padding: var(--space-xl) 0;
                          margin-bottom: var(--space-xl);
                      }}

                      .header-stats {{
                          gap: var(--space-md);
                      }}

                      .stat-item {{
                          min-width: 100px;
                          padding: var(--space-sm);
                      }}

                      .articles-grid {{
                          grid-template-columns: 1fr;
                          gap: var(--space-lg);
                          padding: var(--space-md);
                      }}

                      .featured-article {{
                          grid-template-columns: 1fr;
                      }}

                      .featured-title {{
                          font-size: 2rem;
                      }}

                      .nav-tabs {{
                          padding: var(--space-md) 0;
                      }}

                      .article-footer {{
                          flex-direction: column;
                          align-items: flex-start;
                      }}
                  }}

                  @media (max-width: 480px) {{
                      .article-card {{
                          margin: 0 var(--space-sm);
                      }}

                      .article-content {{
                          padding: var(--space-lg);
                      }}

                      .featured-content {{
                          padding: var(--space-xl);
                      }}

                      .search-input {{
                          padding: var(--space-md) var(--space-md) var(--space-md) 2.5rem;
                      }}

                      .search-icon {{
                          left: var(--space-md);
                      }}
                  }}

                  /* Animations */
                  @keyframes fadeInUp {{
                      from {{
                          opacity: 0;
                          transform: translateY(30px);
                      }}
                      to {{
                          opacity: 1;
                          transform: translateY(0);
                      }}
                  }}

                  @keyframes slideInRight {{
                      from {{
                          opacity: 0;
                          transform: translateX(30px);
                      }}
                      to {{
                          opacity: 1;
                          transform: translateX(0);
                      }}
                  }}

                  .article-card {{
                      animation: fadeInUp 0.6s ease-out forwards;
                  }}

                  .article-card:nth-child(even) {{
                      animation-delay: 0.1s;
                  }}

                  .article-card:nth-child(odd) {{
                      animation-delay: 0.2s;
                  }}

                  /* Hide elements initially for animation */
                  .article-card {{
                      opacity: 0;
                  }}

                  /* Footer */
                  .footer {{
                      margin-top: var(--space-2xl);
                      padding: var(--space-2xl) 0;
                      text-align: center;
                      border-top: 1px solid var(--border-secondary);
                      background: var(--bg-secondary);
                  }}

                  .footer-content {{
                      color: var(--text-tertiary);
                      font-size: 0.875rem;
                  }}

                  .footer-links {{
                      display: flex;
                      justify-content: center;
                      gap: var(--space-lg);
                      margin-top: var(--space-lg);
                      flex-wrap: wrap;
                  }}

                  .footer-link {{
                      color: var(--text-secondary);
                      text-decoration: none;
                      transition: color var(--transition-base);
                  }}

                  .footer-link:hover {{
                      color: var(--accent-primary);
                  }}

                  /* Enhanced Focus States */
                  button:focus-visible,
                  .tab-button:focus-visible,
                  .search-input:focus-visible {{
                      outline: 2px solid var(--accent-primary);
                      outline-offset: 2px;
                  }}

                  /* Smooth transitions for theme changes */
                  * {{
                      transition: background-color var(--transition-base), 
                                  border-color var(--transition-base), 
                                  color var(--transition-base);
                  }}
              </style>
          </head>
          <body>
              <div class="container">
                  <!-- Header Section -->
                  <header class="header">
                      <div class="header-content">
                          <h1>BBC Technology News</h1>
                          <p class="header-subtitle"> Daily Digest • Automatically Updated</p>
                          <div class="header-stats">
                              <div class="stat-item">
                                  <div class="stat-number">{len(entries)}</div>
                                  <div class="stat-label">Articles</div>
                              </div>
                              <div class="stat-item">
                                  <div class="stat-number">{new_count}</div>
                                  <div class="stat-label">New Today</div>
                              </div>
                              <div class="stat-item">
                                  <div class="stat-number">{len(categories)}</div>
                                  <div class="stat-label">Categories</div>
                              </div>
                          </div>
                      </div>
                  </header>

                  <!-- Search Bar -->
                  <div class="search-container">
                      <div class="search-icon">🔍</div>
                      <input type="text" class="search-input" placeholder="Search articles..." id="searchInput">
                  </div>

                  <!-- Category Navigation -->
                  <nav class="nav-tabs" id="categoryTabs">
                      <button class="tab-button active" data-category="all">All Articles</button>''')
                      
                  # Add category tabs
                  for category in sorted(categories.keys()):
                      f.write(f'''
                      <button class="tab-button" data-category="{category}">{category} ({categories[category]})</button>''')
                  
                  f.write('''
                  </nav>

                  <!-- Articles Grid -->
                  <main class="articles-grid" id="articlesGrid">''')
                  
                  # Featured article (first article)
                  if entries:
                      featured = entries[0]
                      published = parser.parse(featured['published']).strftime('%B %d, %Y at %H:%M IST')
                      f.write(f'''
                      <!-- Featured Article -->
                      <article class="featured-article" data-category="{featured.get('category', 'Technology')}">
                          <div class="featured-content">
                              <div class="article-category">{featured.get('category', 'Technology')}</div>
                              <h2 class="featured-title">
                                  <a href="{featured['link']}" target="_blank" rel="noopener">{featured['title']}</a>
                              </h2>
                              <p class="featured-summary">{featured['summary'][:200]}...</p>
                              <a href="{featured['link']}" target="_blank" rel="noopener" class="featured-button">
                                  Read Full Article
                                  <span>→</span>
                              </a>
                              <div class="article-meta" style="color: rgba(255,255,255,0.7); margin-top: 1rem;">
                                  <span>📅 {published}</span>
                                  <span>⏱️ {featured.get('reading_time', '5 min read')}</span>
                                  <span>👤 {featured.get('author', 'BBC Technology')}</span>
                              </div>
                          </div>
                      </article>''')
                  
                  # Regular articles (skip the first one as it's featured)
                  for i, entry in enumerate(entries[1:], 2):
                      published = parser.parse(entry['published']).strftime('%B %d, %Y at %H:%M IST')
                      tags_html = ''.join([f'<span class="tag">{tag}</span>' for tag in entry.get('tags', [])])
                      
                      f.write(f'''
                      <!-- Article {i} -->
                      <article class="article-card" data-category="{entry.get('category', 'Technology')}">
                          <div class="article-content">
                              <div class="article-header">
                                  <span class="article-category">{entry.get('category', 'Technology')}</span>
                                  <span class="article-reading-time">
                                      ⏱️ {entry.get('reading_time', '5 min read')}
                                  </span>
                              </div>
                              <h3 class="article-title">
                                  <a href="{entry['link']}" target="_blank" rel="noopener">{entry['title']}</a>
                              </h3>
                              <p class="article-summary">{entry['summary']}</p>
                              <div class="article-footer">
                                  <div class="article-tags">
                                      {tags_html}
                                  </div>
                              </div>
                          </div>
                      </article>''')
                  
                  f.write(f'''
                  </main>

                  <!-- Footer -->
                  <footer class="footer">
                      <div class="footer-content">
                          <p>Last updated: {datetime.now(pytz.timezone('Asia/Kolkata')).strftime('%Y-%m-%d %H:%M:%S IST')}</p>
                          <p>Automatically updated every 6 hours • Data sourced from BBC Technology RSS</p>
                          <div class="footer-links">
                              <a href="https://www.bbc.com/news/technology" target="_blank" class="footer-link">BBC Technology</a>
                              <a href="https://github.com" target="_blank" class="footer-link">GitHub</a>
                              <a href="#" class="footer-link">RSS Feed</a>
                          </div>
                      </div>
                  </footer>
              </div>

              <!-- JavaScript for Enhanced Functionality -->
              <script>
                  document.addEventListener('DOMContentLoaded', function() {{
                      // Initialize components
                      initializeSearch();
                      initializeCategoryFilter();
                      initializeAnimations();
                      initializeLazyLoading();
                      
                      // Performance optimization
                      requestIdleCallback(() => {{
                          initializeAnalytics();
                          preloadCriticalImages();
                      }});
                  }});

                  function initializeSearch() {{
                      const searchInput = document.getElementById('searchInput');
                      const articles = document.querySelectorAll('.article-card, .featured-article');
                      
                      let searchTimeout;
                      searchInput.addEventListener('input', function(e) {{
                          clearTimeout(searchTimeout);
                          searchTimeout = setTimeout(() => {{
                              const query = e.target.value.toLowerCase();
                              
                              articles.forEach(article => {{
                                  const title = article.querySelector('h2, h3').textContent.toLowerCase();
                                  const summary = article.querySelector('.article-summary, .featured-summary').textContent.toLowerCase();
                                  const isVisible = title.includes(query) || summary.includes(query);
                                  
                                  article.style.display = isVisible ? 'block' : 'none';
                                  if (isVisible) {{
                                      article.style.animation = 'fadeInUp 0.3s ease-out forwards';
                                  }}
                              }});
                              
                              updateResultsCount();
                          }}, 300);
                      }});
                  }}

                  function initializeCategoryFilter() {{
                      const tabs = document.querySelectorAll('.tab-button');
                      const articles = document.querySelectorAll('.article-card, .featured-article');
                      
                      tabs.forEach(tab => {{
                          tab.addEventListener('click', function() {{
                              // Update active tab
                              tabs.forEach(t => t.classList.remove('active'));
                              this.classList.add('active');
                              
                              // Filter articles
                              const category = this.dataset.category;
                              
                              articles.forEach(article => {{
                                  const articleCategory = article.dataset.category;
                                  const isVisible = category === 'all' || articleCategory === category;
                                  
                                  article.style.display = isVisible ? 'block' : 'none';
                                  if (isVisible) {{
                                      article.style.animation = 'fadeInUp 0.3s ease-out forwards';
                                  }}
                              }});
                              
                              // Smooth scroll to articles
                              document.getElementById('articlesGrid').scrollIntoView({{
                                  behavior: 'smooth',
                                  block: 'start'
                              }});
                          }});
                      }});
                  }}

                  function initializeAnimations() {{
                      // Intersection Observer for scroll animations
                      const observer = new IntersectionObserver((entries) => {{
                          entries.forEach(entry => {{
                              if (entry.isIntersecting) {{
                                  entry.target.style.opacity = '1';
                                  entry.target.style.animation = 'fadeInUp 0.6s ease-out forwards';
                              }}
                          }});
                      }}, {{
                          threshold: 0.1,
                          rootMargin: '50px'
                      }});
                      
                      document.querySelectorAll('.article-card').forEach(card => {{
                          observer.observe(card);
                      }});
                  }}

                  function initializeLazyLoading() {{
                      const images = document.querySelectorAll('img[loading="lazy"]');
                      
                      if ('IntersectionObserver' in window) {{
                          const imageObserver = new IntersectionObserver((entries) => {{
                              entries.forEach(entry => {{
                                  if (entry.isIntersecting) {{
                                      const img = entry.target;
                                      img.src = img.src; // Trigger loading
                                      img.classList.add('loaded');
                                      imageObserver.unobserve(img);
                                  }}
                              }});
                          }});
                          
                          images.forEach(img => imageObserver.observe(img));
                      }}
                  }}

                  function updateResultsCount() {{
                      const visibleArticles = document.querySelectorAll('.article-card[style*="display: block"], .article-card:not([style*="display: none"])').length;
                      // Could add a results counter here if needed
                  }}

                  function initializeAnalytics() {{
                      // Track article clicks
                      document.querySelectorAll('a[href*="bbc.com"]').forEach(link => {{
                          link.addEventListener('click', function() {{
                              // Analytics tracking would go here
                              console.log('Article clicked:', this.href);
                          }});
                      }});
                  }}

                  function preloadCriticalImages() {{
                      // Preload first few images for better performance
                      const criticalImages = document.querySelectorAll('.article-image, .featured-image');
                      Array.from(criticalImages).slice(0, 3).forEach(img => {{
                          const preloadImg = new Image();
                          preloadImg.src = img.src;
                      }});
                  }}

                  // Add smooth scrolling for internal links
                  document.querySelectorAll('a[href^="#"]').forEach(anchor => {{
                      anchor.addEventListener('click', function (e) {{
                          e.preventDefault();
                          const target = document.querySelector(this.getAttribute('href'));
                          if (target) {{
                              target.scrollIntoView({{
                                  behavior: 'smooth',
                                  block: 'start'
                              }});
                          }}
                      }});
                  }});

                  // Add keyboard navigation
                  document.addEventListener('keydown', function(e) {{
                      if (e.key === '/' && !e.target.matches('input')) {{
                          e.preventDefault();
                          document.getElementById('searchInput').focus();
                      }}
                  }});
              </script>
          </body>
          </html>''')

          if __name__ == '__main__':
              try:
                  update_changelog()
              except Exception as e:
                  print(f"Error: {{str(e)}}", file=sys.stderr)
                  sys.exit(1)
          EOF

          python update_changelog.py

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Generate tag
        id: generate_tag
        run: |
          # Generate tag with timestamp in IST
          TAG_NAME=$(TZ=Asia/Kolkata date '+release-%Y%m%d-%H%M')
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          # Create changelog content
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "🚀 BBC Tech News Update ($(TZ=Asia/Kolkata date '+%Y-%m-%d %H:%M:%S IST'))" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "✨ **What's New:**" >> $GITHUB_OUTPUT
          if [ -f "_data/changelog.yml" ]; then
            echo "📰 New articles added in this update:" >> $GITHUB_OUTPUT
            grep "title:" _data/changelog.yml | head -n 5 | sed 's/title: /• /' >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "🎨 **Premium UI Features:**" >> $GITHUB_OUTPUT
            echo "• Glassmorphism design with dark theme" >> $GITHUB_OUTPUT
            echo "• Real-time search and category filtering" >> $GITHUB_OUTPUT
            echo "• Smooth animations and micro-interactions" >> $GITHUB_OUTPUT
            echo "• Mobile-first responsive design" >> $GITHUB_OUTPUT
            echo "• Enhanced image loading and caching" >> $GITHUB_OUTPUT
          fi
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: 🚀 Release ${{ steps.generate_tag.outputs.tag_name }}
          tag_name: ${{ steps.generate_tag.outputs.tag_name }}
          body: ${{ steps.generate_tag.outputs.changelog }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit changes
        run: |
          git config --local user.email "ujjwal.kumar1@ibm.com"
          git config --local user.name "uibm"
          echo "🕐 Commit time UTC: $(date -u)" >> commit_time.txt
          echo "🇮🇳 Commit time IST: $(TZ=Asia/Kolkata date)" >> commit_time.txt
          echo "✨ Enhanced with UI design" >> commit_time.txt
          git add _data/changelog.yml index.html requirements.txt commit_time.txt
          git diff --quiet && git diff --staged --quiet || (git commit -m "🚀 Update changelog with UI [$(TZ=Asia/Kolkata date '+%Y-%m-%d %H:%M:%S IST')]

          ✨ Features:
          - Premium glassmorphism design
          - Dark theme with gradient backgrounds
          - Real-time search functionality
          - Category-based filtering
          - Smooth animations and transitions
          - Mobile-first responsive layout
          - Enhanced image handling
          - Performance optimizations
          
          📊 Stats: Updated with latest BBC Technology news" && git push)